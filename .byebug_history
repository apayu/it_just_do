exit
const
exit
$LOAD_PATH << File.join(File.dirname(__FILE__), "..", "app", "controllers")
require 'mavericks'
exit
raw = File.read('config/database.yml')
continue
exit
sql_syntax.map { |key, val| "#{key.to_s} = #{self.to_sql_text(val)}" }
exit
sql_syntax
sql_syntax.map do |key, val|
exit
sql_syntax
continue
sql_syntax
exit
@where_values
sql_syntax
continue
sql_syntax
continue
sql
exit
con
exit
con
exit
condition
exit
condition
condiftion
exit
sql_syntax
query
exit
args
exit
args
key
exit
attr.key
attr
exit
args
*args
exit
exit }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").find { |n| puts n }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").find { |n| puts }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").find { |n| n.key? }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").find { |n| n.key == 'count' }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").find { |n| n.key }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").find { |n| puts n }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").count
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").detect{ |m| m.key == 'count' }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}").detect { |m| m.key == 'count' }
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}")[0]
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}")
exit
m
exit
self.connection.execute("SELECT COUNT(*) FROM #{self.table_name}")
exit
schema
exit
self.table_name
schema
self.connection
self.table_name
schema
exit
continue
exit
singular_table_name = Mavericks.to_underscore name
Mavericks.to_underscore
exit
Mavericks.to_underscore
Mavericks
exit
Mavericks.to_underscore name
name
singular_table_name = Mavericks.to_underscore name
continue
exit
include Persistence
exit
@@connection
@@connect
exit
@db
exit
database_config['default']['adapter']
database_config['default']
database_config.default
database_config
exit
database_config
exit
config
exit
config
exit
rwa.default
raw
exit
option
exit
autoload :Method, "./method"
exit
a
exit
self.send(attr)
args.empty?
continue
exit
args.empty?
self.send("#{attr}=", args[0])
args
continue
a
exit
a
args
a
continue
 self.send(attr)
 self.send(attr
attr
exit
attr
attrs
exit
@hash
name
continue
@hash
name
continue
exit
args[0]
exit
@hash
#hash
fields = @hash.map { |key, value| "#{key}=#{self.class.to_sql(value)}" }.join ","
exit
@hash
exit
args
exit
attr
exit
attr
exit
*args
exit
continue
self
continue
attr
self
slef
exit
self
slef
#hash
continue
self[attr.to_s]
attr
continue
self[attr.to_s]
continue
self[attr.to_s]
self
exit
g.first.title
g.first
g
exit
row[0].title
row
exit
data
exit
g.title
g = self.new data
self.new data
data
exit
self
continue
attr
exit
continue
exit
attr
attrs.key?(attr)
attrs
continue
exit
self.class.schema.reject {|k,v| k != 'id'}
self.class.schema.reject
self.class.schema
exit
self.class.schema
attrs
contiue
continue
attr
exit
self.class.schema
self.class
self
schema
continue
exit
values
vals
continue
exit
DB.execute(sql)
data
exit
keys
vals.join ","
vals
continue
@hash
fields
continue
@hash["id"]
self.class.table
fields
exit
@hash
exit
schema
schema.keys
values.delete :id
values.delete 'id'
values.delete :id
values
schema.keys
keys
vals
exit
vals
exit
result
exit
row
exit
row.each { |attr| puts attr }
row
row.each do |attr|
