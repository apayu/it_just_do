exit
schema
exit
self.table_name
schema
self.connection
self.table_name
schema
exit
continue
exit
singular_table_name = Mavericks.to_underscore name
Mavericks.to_underscore
exit
Mavericks.to_underscore
Mavericks
exit
Mavericks.to_underscore name
name
singular_table_name = Mavericks.to_underscore name
continue
exit
include Persistence
exit
@@connection
@@connect
exit
@db
exit
database_config['default']['adapter']
database_config['default']
database_config.default
database_config
exit
database_config
exit
config
exit
config
exit
rwa.default
raw
exit
option
exit
autoload :Method, "./method"
exit
a
exit
self.send(attr)
args.empty?
continue
exit
args.empty?
self.send("#{attr}=", args[0])
args
continue
a
exit
a
args
a
continue
 self.send(attr)
 self.send(attr
attr
exit
attr
attrs
exit
@hash
name
continue
@hash
name
continue
exit
args[0]
exit
@hash
#hash
fields = @hash.map { |key, value| "#{key}=#{self.class.to_sql(value)}" }.join ","
exit
@hash
exit
args
exit
attr
exit
attr
exit
*args
exit
continue
self
continue
attr
self
slef
exit
self
slef
#hash
continue
self[attr.to_s]
attr
continue
self[attr.to_s]
continue
self[attr.to_s]
self
exit
g.first.title
g.first
g
exit
row[0].title
row
exit
data
exit
g.title
g = self.new data
self.new data
data
exit
self
continue
attr
exit
continue
exit
attr
attrs.key?(attr)
attrs
continue
exit
self.class.schema.reject {|k,v| k != 'id'}
self.class.schema.reject
self.class.schema
exit
self.class.schema
attrs
contiue
continue
attr
exit
self.class.schema
self.class
self
schema
continue
exit
values
vals
continue
exit
DB.execute(sql)
data
exit
keys
vals.join ","
vals
continue
@hash
fields
continue
@hash["id"]
self.class.table
fields
exit
@hash
exit
schema
schema.keys
values.delete :id
values.delete 'id'
values.delete :id
values
schema.keys
keys
vals
exit
vals
exit
result
exit
row
exit
row.each { |attr| puts attr }
row
row.each do |attr|
row
exit
DB.execute("SELECT COUNT(*) FROM #{table}") do |row|
db.execute("SELECT COUNT(*) FROM #{table}") do |row|
        byebug
exit
DB.execute("SELECT COUNT(*) FROM #{table}")
exit
data
data["id"]
exit
vals
continue
exit
self.new('123'=>'456')
self.new
self
self.new data
data
data["title"]
data
self.new data
data
data["id"] = DB.execute(sql)[0][0]
sql
exit
sql = 'SELECT last_insert_rowid();'
sql = "SELECT last_insert_rowid();"
keys.zip
keys
keys.zip
data = Hash[keys.zip vals]
vals
keys.zip
continue
data
exit
values[key.to_sym]
values
key.to_sym
key
exit
values
keys
exit
keys
schema.keys - ["id"]
schema.keys
schema
vals
exit
keys
vals
exit
schema.keys - [:id]
schema
exit
schema
schema.keys
schema.key
schema
values
schema
keys
